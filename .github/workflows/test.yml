name: Terraform plan and apply

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, edited]

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Init
        run: terraform init
      - name: Terraform Plan
        run: terraform plan -no-color -var "profile=dev" -out=tfplan
      - name: Set Terraform Output as Environment Variable
        id: output_env_var
        run: echo "::set-output name=tfplan::$(cat tfplan)"
      - name: Terraform Apply
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        run: terraform apply -no-color -auto-approve tfplan
      - name: Terraform Destroy
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        run: terraform destroy -no-color -auto-approve



# worked till terraform init:

# name: Terraform plan and apply

# on:
#   pull_request:
#     branches:
#       - main
#     types: [opened, synchronize, reopened, edited]

# jobs:
#   terraform:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1

#     - name: Terraform Init
#       run: terraform init

#     - name: Terraform Validate
#       run: terraform validate

#     - name: Terraform Plan
#       id: plan
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       run: terraform plan -no-color -var "profile=dev"

#     - name: Comment Plan Output
#       if: ${{ github.actor != github.repository_owner }}
#       uses: unsplash/comment-on-pr@v1.3.0
#       env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         msg: |
#           **Terraform Plan:**
#           ```
#           ${{ steps.plan.outputs.stdout }}
#           ```

#     - name: Terraform Apply
#       if: github.event.action == 'closed' && github.event.pull_request.merged == true
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       run: terraform apply -auto-approve -var "profile=dev"

#     - name: Terraform Destroy
#       if: github.event.action == 'closed' && github.event.pull_request.merged == true
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#       run: terraform destroy -auto-approve -var "profile=dev"
